"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promiseLoad = promiseLoad;
exports.guid = guid;

require("spinal-core-connectorjs");

/*
 * Copyright 2018 SpinalCom - www.spinalcom.com
 *
 * This file is part of SpinalCore.
 *
 * Please read all of the following terms and conditions
 * of the Free Software license Agreement ("Agreement")
 * carefully.
 *
 * This Agreement is a legally binding contract between
 * the Licensee (as defined below) and SpinalCom that
 * sets forth the terms and conditions that govern your
 * use of the Program. By installing and/or using the
 * Program, you agree to abide by all the terms and
 * conditions stated or referenced herein.
 *
 * If you do not agree to abide by these terms and
 * conditions, do not demonstrate your acceptance and do
 * not install or use the Program.
 * You should have received a copy of the license along
 * with this file. If not, see
 * <http://resources.spinalcom.com/licenses.pdf>.
 */
const globalType = typeof window === "undefined" ? global : window;
/**
 * Loads the element pointed by the pointer.
 * @param {SpinalNodePointer} nodePointer SpinalNodePointer to load
 * @return {Promise<*>} Element to wich the pointer pointed
 */

function promiseLoad(nodePointer) {
  if (nodePointer.ptr instanceof globalType.Ptr && nodePointer.ptr.data.value !== 0 && typeof globalType.FileSystem._objects[nodePointer.ptr.data.value] !== "undefined") {
    return Promise.resolve(globalType.FileSystem._objects[nodePointer.ptr.data.value]);
  } else {
    return new Promise(resolve => {
      nodePointer.ptr.load(resolve);
    });
  }
}
/**
 * Generates a random number and returns in a string.
 * @returns {String} Random number in a string
 */


function s4() {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
}
/**
 * Creates a unique id based on a name.
 * @param {String} name Name from wich the id is generated
 * @returns {String} Generated id
 */


function guid(name) {
  return name + "-" + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4() + "-" + Date.now().toString(16);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9VdGlsaXRpZXMuanMiXSwibmFtZXMiOlsiZ2xvYmFsVHlwZSIsIndpbmRvdyIsImdsb2JhbCIsInByb21pc2VMb2FkIiwibm9kZVBvaW50ZXIiLCJwdHIiLCJQdHIiLCJkYXRhIiwidmFsdWUiLCJGaWxlU3lzdGVtIiwiX29iamVjdHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxvYWQiLCJzNCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiZ3VpZCIsIm5hbWUiLCJEYXRlIiwibm93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQXVCQTs7QUF2QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBLE1BQU1BLFVBQVUsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQyxNQUFoQyxHQUF5Q0QsTUFBNUQ7QUFFQTs7Ozs7O0FBS0EsU0FBU0UsV0FBVCxDQUFxQkMsV0FBckIsRUFBa0M7QUFDaEMsTUFDRUEsV0FBVyxDQUFDQyxHQUFaLFlBQTJCTCxVQUFVLENBQUNNLEdBQXRDLElBQ0FGLFdBQVcsQ0FBQ0MsR0FBWixDQUFnQkUsSUFBaEIsQ0FBcUJDLEtBQXJCLEtBQStCLENBRC9CLElBRUEsT0FBT1IsVUFBVSxDQUFDUyxVQUFYLENBQXNCQyxRQUF0QixDQUErQk4sV0FBVyxDQUFDQyxHQUFaLENBQWdCRSxJQUFoQixDQUFxQkMsS0FBcEQsQ0FBUCxLQUNBLFdBSkYsRUFLRTtBQUNBLFdBQU9HLE9BQU8sQ0FBQ0MsT0FBUixDQUNMWixVQUFVLENBQUNTLFVBQVgsQ0FBc0JDLFFBQXRCLENBQStCTixXQUFXLENBQUNDLEdBQVosQ0FBZ0JFLElBQWhCLENBQXFCQyxLQUFwRCxDQURLLENBQVA7QUFHRCxHQVRELE1BU087QUFDTCxXQUFPLElBQUlHLE9BQUosQ0FBWUMsT0FBTyxJQUFJO0FBQzVCUixNQUFBQSxXQUFXLENBQUNDLEdBQVosQ0FBZ0JRLElBQWhCLENBQXFCRCxPQUFyQjtBQUNELEtBRk0sQ0FBUDtBQUdEO0FBQ0Y7QUFFRDs7Ozs7O0FBSUEsU0FBU0UsRUFBVCxHQUFjO0FBQ1osU0FBT0MsSUFBSSxDQUFDQyxLQUFMLENBQVcsQ0FBQyxJQUFJRCxJQUFJLENBQUNFLE1BQUwsRUFBTCxJQUFzQixPQUFqQyxFQUNKQyxRQURJLENBQ0ssRUFETCxFQUVKQyxTQUZJLENBRU0sQ0FGTixDQUFQO0FBR0Q7QUFFRDs7Ozs7OztBQUtBLFNBQVNDLElBQVQsQ0FBY0MsSUFBZCxFQUFvQjtBQUNsQixTQUNFQSxJQUFJLEdBQ0osR0FEQSxHQUVBUCxFQUFFLEVBRkYsR0FHQUEsRUFBRSxFQUhGLEdBSUEsR0FKQSxHQUtBQSxFQUFFLEVBTEYsR0FNQSxHQU5BLEdBT0FBLEVBQUUsRUFQRixHQVFBLEdBUkEsR0FTQUEsRUFBRSxFQVRGLEdBVUEsR0FWQSxHQVdBQSxFQUFFLEVBWEYsR0FZQUEsRUFBRSxFQVpGLEdBYUFBLEVBQUUsRUFiRixHQWNBLEdBZEEsR0FlQVEsSUFBSSxDQUFDQyxHQUFMLEdBQVdMLFFBQVgsQ0FBb0IsRUFBcEIsQ0FoQkY7QUFrQkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTggU3BpbmFsQ29tIC0gd3d3LnNwaW5hbGNvbS5jb21cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBTcGluYWxDb3JlLlxuICpcbiAqIFBsZWFzZSByZWFkIGFsbCBvZiB0aGUgZm9sbG93aW5nIHRlcm1zIGFuZCBjb25kaXRpb25zXG4gKiBvZiB0aGUgRnJlZSBTb2Z0d2FyZSBsaWNlbnNlIEFncmVlbWVudCAoXCJBZ3JlZW1lbnRcIilcbiAqIGNhcmVmdWxseS5cbiAqXG4gKiBUaGlzIEFncmVlbWVudCBpcyBhIGxlZ2FsbHkgYmluZGluZyBjb250cmFjdCBiZXR3ZWVuXG4gKiB0aGUgTGljZW5zZWUgKGFzIGRlZmluZWQgYmVsb3cpIGFuZCBTcGluYWxDb20gdGhhdFxuICogc2V0cyBmb3J0aCB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgdGhhdCBnb3Zlcm4geW91clxuICogdXNlIG9mIHRoZSBQcm9ncmFtLiBCeSBpbnN0YWxsaW5nIGFuZC9vciB1c2luZyB0aGVcbiAqIFByb2dyYW0sIHlvdSBhZ3JlZSB0byBhYmlkZSBieSBhbGwgdGhlIHRlcm1zIGFuZFxuICogY29uZGl0aW9ucyBzdGF0ZWQgb3IgcmVmZXJlbmNlZCBoZXJlaW4uXG4gKlxuICogSWYgeW91IGRvIG5vdCBhZ3JlZSB0byBhYmlkZSBieSB0aGVzZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMsIGRvIG5vdCBkZW1vbnN0cmF0ZSB5b3VyIGFjY2VwdGFuY2UgYW5kIGRvXG4gKiBub3QgaW5zdGFsbCBvciB1c2UgdGhlIFByb2dyYW0uXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBsaWNlbnNlIGFsb25nXG4gKiB3aXRoIHRoaXMgZmlsZS4gSWYgbm90LCBzZWVcbiAqIDxodHRwOi8vcmVzb3VyY2VzLnNwaW5hbGNvbS5jb20vbGljZW5zZXMucGRmPi5cbiAqL1xuaW1wb3J0IFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIjtcblxuY29uc3QgZ2xvYmFsVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB3aW5kb3c7XG5cbi8qKlxuICogTG9hZHMgdGhlIGVsZW1lbnQgcG9pbnRlZCBieSB0aGUgcG9pbnRlci5cbiAqIEBwYXJhbSB7U3BpbmFsTm9kZVBvaW50ZXJ9IG5vZGVQb2ludGVyIFNwaW5hbE5vZGVQb2ludGVyIHRvIGxvYWRcbiAqIEByZXR1cm4ge1Byb21pc2U8Kj59IEVsZW1lbnQgdG8gd2ljaCB0aGUgcG9pbnRlciBwb2ludGVkXG4gKi9cbmZ1bmN0aW9uIHByb21pc2VMb2FkKG5vZGVQb2ludGVyKSB7XG4gIGlmIChcbiAgICBub2RlUG9pbnRlci5wdHIgaW5zdGFuY2VvZiBnbG9iYWxUeXBlLlB0ciAmJlxuICAgIG5vZGVQb2ludGVyLnB0ci5kYXRhLnZhbHVlICE9PSAwICYmXG4gICAgdHlwZW9mIGdsb2JhbFR5cGUuRmlsZVN5c3RlbS5fb2JqZWN0c1tub2RlUG9pbnRlci5wdHIuZGF0YS52YWx1ZV0gIT09XG4gICAgXCJ1bmRlZmluZWRcIlxuICApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgZ2xvYmFsVHlwZS5GaWxlU3lzdGVtLl9vYmplY3RzW25vZGVQb2ludGVyLnB0ci5kYXRhLnZhbHVlXVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgbm9kZVBvaW50ZXIucHRyLmxvYWQocmVzb2x2ZSk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIGFuZCByZXR1cm5zIGluIGEgc3RyaW5nLlxuICogQHJldHVybnMge1N0cmluZ30gUmFuZG9tIG51bWJlciBpbiBhIHN0cmluZ1xuICovXG5mdW5jdGlvbiBzNCgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXG4gICAgLnRvU3RyaW5nKDE2KVxuICAgIC5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuaXF1ZSBpZCBiYXNlZCBvbiBhIG5hbWUuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBOYW1lIGZyb20gd2ljaCB0aGUgaWQgaXMgZ2VuZXJhdGVkXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBHZW5lcmF0ZWQgaWRcbiAqL1xuZnVuY3Rpb24gZ3VpZChuYW1lKSB7XG4gIHJldHVybiAoXG4gICAgbmFtZSArXG4gICAgXCItXCIgK1xuICAgIHM0KCkgK1xuICAgIHM0KCkgK1xuICAgIFwiLVwiICtcbiAgICBzNCgpICtcbiAgICBcIi1cIiArXG4gICAgczQoKSArXG4gICAgXCItXCIgK1xuICAgIHM0KCkgK1xuICAgIFwiLVwiICtcbiAgICBzNCgpICtcbiAgICBzNCgpICtcbiAgICBzNCgpICtcbiAgICBcIi1cIiArXG4gICAgRGF0ZS5ub3coKS50b1N0cmluZygxNilcbiAgKTtcbn1cblxuZXhwb3J0IHtcbiAgcHJvbWlzZUxvYWQsXG4gIGd1aWRcbn07XG4iXX0=